name: Build PPTgenerator (Windows & macOS)

on:
  push:
    branches: 
      - main
  workflow_dispatch:

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: windows-latest
            arch: x64
          - os: macos-latest
            arch: x64
          - os: macos-latest-xlarge
            arch: arm64

    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pyinstaller

      # 安装 UPX (不同系统不同方法)
      - name: Install UPX on macOS
        if: startsWith(matrix.os, 'macos-')
        run: brew install upx

      - name: Install UPX on Windows
        if: matrix.os == 'windows-latest'
        run: choco install upx -y
        shell: pwsh

      # 打包（不同平台排除不必要模块，减小体积）
      - name: Build executable (Windows)
        if: matrix.os == 'windows-latest'
        run: |
          pyinstaller --onefile --console --optimize=2 --clean `
            --exclude-module tkinter `
            --exclude-module matplotlib `
            --exclude-module scipy `
            --exclude-module IPython `
            --exclude-module jupyter `
            --exclude-module notebook `
            --exclude-module pytest `
            --exclude-module setuptools `
            --exclude-module distutils `
            --exclude-module pip `
            --hidden-import=uvicorn.loops.auto `
            --hidden-import=uvicorn.protocols.http.auto `
            --hidden-import=uvicorn.protocols.websockets.auto `
            --hidden-import=uvicorn.lifespan.on `
            --add-data "static;static" `
            --add-data "prompts;prompts" `
            --add-data "tools/pptx_json.json;tools" `
            --add-data "模板.pptx;." `
            --name "PPTgenerator" `
            web_app.py
        shell: pwsh

      - name: Build executable (Mac Intel)
        if: matrix.os == 'macos-latest'
        run: |
          pyinstaller --onefile --console --optimize=2 --clean \
            --exclude-module tkinter \
            --exclude-module matplotlib \
            --exclude-module scipy \
            --exclude-module IPython \
            --exclude-module jupyter \
            --exclude-module notebook \
            --exclude-module pytest \
            --exclude-module setuptools \
            --exclude-module distutils \
            --exclude-module pip \
            --hidden-import=uvicorn.loops.auto \
            --hidden-import=uvicorn.protocols.http.auto \
            --hidden-import=uvicorn.protocols.websockets.auto \
            --hidden-import=uvicorn.lifespan.on \
            --add-data "static:static" \
            --add-data "prompts:prompts" \
            --add-data "tools/pptx_json.json:tools" \
            --add-data "模板.pptx:." \
            --name "PPTgenerator-intel" \
            web_app.py
        shell: bash

      - name: Build executable (Mac ARM)
        if: matrix.os == 'macos-latest-xlarge'
        run: |
          pyinstaller --onefile --console --optimize=2 --clean \
            --exclude-module tkinter \
            --exclude-module matplotlib \
            --exclude-module scipy \
            --exclude-module IPython \
            --exclude-module jupyter \
            --exclude-module notebook \
            --exclude-module pytest \
            --exclude-module setuptools \
            --exclude-module distutils \
            --exclude-module pip \
            --hidden-import=uvicorn.loops.auto \
            --hidden-import=uvicorn.protocols.http.auto \
            --hidden-import=uvicorn.protocols.websockets.auto \
            --hidden-import=uvicorn.lifespan.on \
            --add-data "static:static" \
            --add-data "prompts:prompts" \
            --add-data "tools/pptx_json.json:tools" \
            --add-data "模板.pptx:." \
            --name "PPTgenerator-arm64" \
            web_app.py
        shell: bash

      # 设置 macOS 可执行文件权限
      - name: Set executable permissions (macOS Intel)
        if: matrix.os == 'macos-latest'
        run: chmod +x dist/PPTgenerator-intel
        shell: bash

      - name: Set executable permissions (macOS ARM)
        if: matrix.os == 'macos-latest-xlarge'
        run: chmod +x dist/PPTgenerator-arm64
        shell: bash

      # 压缩（跳过失败的文件）
      - name: Compress with UPX
        run: |
          if [[ "${{ matrix.os }}" == "windows-latest" ]]; then
            upx --best dist/*.exe || echo "UPX compression failed, continuing..."
          else
            upx --best dist/* || echo "UPX compression failed, continuing..."
          fi
        shell: bash

      # 再次设置权限（UPX压缩后可能丢失权限）
      - name: Restore executable permissions (macOS Intel)
        if: matrix.os == 'macos-latest'
        run: chmod +x dist/PPTgenerator-intel
        shell: bash

      - name: Restore executable permissions (macOS ARM)
        if: matrix.os == 'macos-latest-xlarge'
        run: chmod +x dist/PPTgenerator-arm64
        shell: bash

      # macOS 代码签名 (ad-hoc签名，避免"未知开发者"警告)
      - name: Code sign executable (macOS Intel)
        if: matrix.os == 'macos-latest'
        run: |
          codesign --force --deep --sign - dist/PPTgenerator-intel
          echo "macOS Intel应用已签名"
        shell: bash

      - name: Code sign executable (macOS ARM)
        if: matrix.os == 'macos-latest-xlarge'
        run: |
          codesign --force --deep --sign - dist/PPTgenerator-arm64
          echo "macOS ARM应用已签名"
        shell: bash

      # 上传 Artifact
      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: PPTgenerator-${{ matrix.os }}-${{ matrix.arch }}
          path: dist/*
